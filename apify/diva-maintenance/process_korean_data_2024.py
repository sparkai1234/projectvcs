#!/usr/bin/env python3
"""
Process Real Korean VC Company Data for 2024
Uses exactly the data provided by user - processes both income and balance sheet data
"""

import os
from supabase import create_client, Client

# Supabase configuration
SUPABASE_URL = "https://udfgtccxbqmalgpqyxzz.supabase.co"
SUPABASE_SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVkZmd0Y2N4YnFtYWxncHF5eHp6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk0NjY5NiwiZXhwIjoyMDY0NTIyNjk2fQ.JgyEKjOhuZpNCCOadsaK90Q8CcoPf_rgdtSXh-1BU18"

def clean_number(value: str) -> float:
    """Clean Korean number format to float"""
    if not value or value == 'ÏÉÅÏÑ∏':
        return 0.0
    return float(value.replace(',', ''))

def process_income_data():
    """Process income statement data from user input"""
    # Income statement data provided by user
    income_data = """Í≤ΩÎÇ®Î≤§Ï≤òÌà¨Ïûê	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	3,652,088,433	3,652,088,433	2,933,481,853	718,606,580	-39,264,509	679,342,071	679,342,071	ÏÉÅÏÑ∏
Í≥®Îì†Ïò§ÌÅ¨Î≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	1,176,648,262	1,176,648,262	461,515,028	715,133,234	-9,000,000	706,133,234	706,133,234	ÏÉÅÏÑ∏
Í∑∏ÎûúÎìúÎ≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	394,540,449	394,540,449	0	394,540,449	-24,339,445	370,200,004	370,200,004	ÏÉÅÏÑ∏
Í∏ÄÎ°úÎÑ∑Î≤§Ï≤òÌååÌä∏ÎÑàÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	689,033,408	689,033,408	500,000,000	189,033,408	-125,080,683	63,952,725	63,952,725	ÏÉÅÏÑ∏
ÎÑ§Ïò§Ïù∏ÏÇ¨Ïù¥Ìä∏Î≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	379,937,030	379,937,030	251,339,032	128,597,998	-128,597,998	0	0	ÏÉÅÏÑ∏"""
    
    records = []
    for line in income_data.strip().split('\n'):
        parts = line.split('\t')
        if len(parts) >= 8:
            records.append({
                'company_name': parts[0],
                'data_year': 2024,
                'revenue': clean_number(parts[4]),
                'operating_income': clean_number(parts[5]),
                'net_income': clean_number(parts[6]),
                'total_assets': clean_number(parts[7])
            })
    return records

def process_balance_data():
    """Process balance sheet data from user input - first 10 companies"""
    balance_data = """Í≤ΩÎÇ®Î≤§Ï≤òÌà¨Ïûê	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	5,257,825,484	2,623,949,842	186,283,286	4,700,000,000	5,071,542,198	ÏÉÅÏÑ∏
Í≥®Îì†Ïò§ÌÅ¨Î≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	2,715,824,262	980,033,468	9,691,028	2,500,000,000	2,706,133,234	ÏÉÅÏÑ∏
Í∑∏ÎûúÎìúÎ≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	1,918,879,894	680,373,304	24,339,445	2,077,000,000	1,894,540,449	ÏÉÅÏÑ∏
Í∏ÄÎ°úÎÑ∑Î≤§Ï≤òÌååÌä∏ÎÑàÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	1,314,114,091	870,026,584	125,080,683	2,311,912,000	1,189,033,408	ÏÉÅÏÑ∏
ÎÑ§Ïò§Ïù∏ÏÇ¨Ïù¥Ìä∏Î≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	1,508,535,028	148,696,470	128,597,998	2,800,000,000	1,379,937,030	ÏÉÅÏÑ∏
ÎÑ•Ïä§Ìä∏ÏßÄÏù∏Î≤†Ïä§Ìä∏Î®ºÌä∏	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	13,433,334,665	10,059,181,385	4,809,162,857	7,315,000,000	8,624,171,808	ÏÉÅÏÑ∏
ÎÖ∏Î≥¥ÏÑπÏù∏Î≤†Ïä§Ìä∏Î®ºÌä∏	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	4,914,917,638	1,015,658,720	421,778,942	5,000,140,000	4,493,138,696	ÏÉÅÏÑ∏
ÎÖ∏Ìã∏Îü¨Ïä§Ïù∏Î≤†Ïä§Ìä∏Î®ºÌä∏	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	2,270,795,642	1,025,468,341	584,932,351	2,450,725,000	1,685,863,291	ÏÉÅÏÑ∏
Îã§ÎÇ†Ìà¨ÏûêÌååÌä∏ÎÑàÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	K-IFRS	Í∞úÎ≥Ñ	12,664,456,209	6,514,251,142	2,069,789,674	10,000,000,000	10,594,666,535	ÏÉÅÏÑ∏
Îã§ÏÑ±Î≤§Ï≤òÏä§	Í≥†Ïú†Í≥ÑÏ†ï	12	ÏùºÎ∞ò	Í∞úÎ≥Ñ	2,213,428,553	281,219,518	19,012,198	3,000,000,000	2,194,416,355	ÏÉÅÏÑ∏"""
    
    records = []
    for line in balance_data.strip().split('\n'):
        parts = line.split('\t')
        if len(parts) >= 10:
            records.append({
                'company_name': parts[0],
                'data_year': 2024,
                'total_assets': clean_number(parts[5]),
                'venture_investment_assets': clean_number(parts[6]),
                'total_liabilities': clean_number(parts[7]),
                'paid_in_capital': clean_number(parts[8]),
                'total_equity': clean_number(parts[9])
            })
    return records

def main():
    """Upload the processed data"""
    print("üöÄ Processing real Korean VC company data for 2024...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
    
    try:
        # Clear existing 2024 data
        print("üßπ Clearing existing 2024 data...")
        supabase.table('diva_income_statements').delete().eq('data_year', 2024).execute()
        supabase.table('diva_balance_sheets').delete().eq('data_year', 2024).execute()
        
        # Process and upload income statements
        income_records = process_income_data()
        if income_records:
            supabase.table('diva_income_statements').insert(income_records).execute()
            print(f"‚úÖ Income Statements: {len(income_records)} records uploaded")
        
        # Process and upload balance sheets
        balance_records = process_balance_data()
        if balance_records:
            supabase.table('diva_balance_sheets').insert(balance_records).execute()
            print(f"‚úÖ Balance Sheets: {len(balance_records)} records uploaded")
        
        # Verify
        income_count = supabase.table('diva_income_statements').select('*', count='exact').eq('data_year', 2024).execute()
        balance_count = supabase.table('diva_balance_sheets').select('*', count='exact').eq('data_year', 2024).execute()
        
        print(f"\nüìä Final Count:")
        print(f"Income Statements: {income_count.count}")
        print(f"Balance Sheets: {balance_count.count}")
        print(f"Total: {income_count.count + balance_count.count}")
        
        print("\n‚úÖ Upload completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        raise

if __name__ == "__main__":
    main() 